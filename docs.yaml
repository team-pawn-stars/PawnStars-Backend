openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Nerd-Bear/pawn-stars/1.0.0
  - description: Production Server
    url: https://pawn-stars.istruly.sexy
  - description: Dev Server
    url: https://pawn-stars.istruly.sexy
info:
  version: "1.0.1"
  title: Pawn-Stars
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: nerd-bear@dsm.hs.kr
    url: https://app.swaggerhub.com/apis-docs/Nerd-Bear/pawn-stars/1.0.0
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  x-logo:
    url: https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F84ea5a08-8bbd-4a3b-b61a-cfb3e081ea56%2Fpledge.png?table=block&id=4399ef37-e1d2-4605-8123-af960858107c&width=3360&cache=v2
tags:
  - name: Account
    description: 계정 관련
  - name: Pawn Seller
    description: 전당포 관점 유질물
  - name: Pawn Buyer
    description: 구매자 관점 유질물
  - name: Flex
    description: 자랑하기
  - name: Chat
    description: 채팅


  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /signup/buyer:
    post:
      tags:
        - Account
      summary: 구매자 회원 가입
      operationId: buyer_signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: 아이디
                  type: string
                password:
                  description: 비밀번호
                  type: string
                phone:
                  description: 전화번호
                  type: string
                  example: 010-0000-0000
                name:
                  description: 이름
                  type: string
                  example: 인상민
      responses:
        '201':
          description: 회원가입 성공
        '409':
          description: 이미 있는 아이디
  /signup/seller:
    post:
      tags:
        - Account
      summary: 판매자 회원 가입
      operationId: sellerSignup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: 아이디
                  type: string
                password:
                  description: 비밀번호
                  type: string
                phone:
                  description: 전화번호
                  type: string
                  example: 010-0000-0000
                name:
                  description: 이름
                  type: string
                  example: a전당포
                longitude:
                  description: 경도
                  example: 126.661971
                latitude:
                  description: 위도
                  example: 36.836192

      responses:
        '201':
          description: 회원가입 성공
        '409':
          description: 이미 있는 아이디
  /signin:
    post:
      tags:
      - Account
      summary: 로그인
      operationId: signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: 아이디
                  type: string
                password:
                  description: 비밀번호
                  type: string
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    description: 액세스 토큰
                    type: string
                  refreshToken:
                    description: 리프레시 토큰
                    type: string
        '401':
          description: 로그인 실패

  /pawn:
    get:
      tags:
        - Pawn Buyer
      summary: 유질물 리스트
      operationId: pawn_list
      parameters:
        - name: category
          in: query
          description: 카테고리
          required: True
          schema:
            type: string
            enum:
              - all
              - electronic
              - jewel
              - women_cloth
              - women_goods
              - men_cloth
              - men_goods
              - furniture
              - etc
            default: all
        - name: sort_key
          in: query
          description: 정렬 기준
          required: True
          schema:
            type: string
            enum:
              - like
              - new
            default: new
        - name: region
          in: query
          description: 지역 (url encoding 해서 입력)
          required: True
          schema:
            type: string
            enum:
              - 서울
              - 광주
              - 대구
              - 대전
              - 부산
              - 울산
              - 인천

              - 강원
              - 경기
              - 경북
              - 경남
              - 전북
              - 전남
              - 제주
              - 충북
              - 충남
        - name: page
          in: query
          description: 페이지 번호
          required: True
          schema:
            type: integer
            default: 1
        - name: query
          in: query
          description: 검색어
          required: False
          schema:
            type: string

      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    post_id:
                      type: string
                    photo:
                      type: string
                      example: imange url
                    author_id:
                      type: string
                      example: author id
                    author_name:
                      type: string
                      example: author name
                    title:
                      type: string
                      example: title
                    post_date:
                      type: string
                      example: "2019-04-20 12:30:00"
                    price:
                      type: string
                      example: "30,000,000"
    post:
      tags:
        - Pawn Seller
      summary: 유질물 판매 등록
      operationId: pawn_post
      parameters:
        - name: Authorization
          in: header
          description: JWT 토큰
          required: True
          schema:
            type: string
            example: Bearer <access_token>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: 제목
                  type: string
                content:
                  description: 내용
                  type: string
                histories:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        example: "2019-04-20 12:30:00"
                      content:
                        type: string
                        example: history content
                price:
                  type: string
                  example: "30,000,000"
      responses:
        '201':
          description: '작성 성공'

  /pawn/<post_id>:
    get:
      tags:
        - Pawn Buyer
      summary: 유질물 상세조회
      operationId: pawn_retrieve
      parameters:
        - name: Authorization
          in: header
          description: JWT 토큰
          required: True
          schema:
            type: string
            example: JWT <access_token>
        - name: post_id
          in: path
          description: 유질물 아이디
          required: True
          schema:
            type: string
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                      example: image url
                  author_name:
                    type: string
                    example: author name
                  author_id:
                    type: string
                    example: author id
                  title:
                    type: string
                    example: title
                  content:
                    type: string
                    example: content
                  price:
                    type: string
                    example: "30,000,000"
                  like:
                    type: integer
                  histories:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2019-04-20 12:00:00"
                        content:
                          type: string
                          example: history content
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2019-04-20 12:00:00"
                        content:
                          type: string
                          example: comment content
                        author_name:
                          type: string
                          example: author name
                        author_id:
                          type: string
                          example: author id
  /flex:
    get:
      tags:
        - Flex
      summary: 자랑 목록
      operationId: flex_ist
      parameters:
        - name: sort_key
          in: query
          description: 정렬 기준
          required: True
          schema:
            type: string
            enum:
              - like
              - new
            default: new
        - name: page
          in: query
          description: 페이지 번호
          required: True
          schema:
            type: integer
            default: 1

      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  type:
                    object
                  properties:
                    post_id:
                      type: string
                    price:
                      type: string
                      example: 30,000,000
                    pawn_id:
                      type: string
                    photo:
                      type:
                        string
                      example:
                        imange url
                    author_id:
                      type: string
                      example: author id
                    author_name:
                      type: string
                      example: author name
                    title:
                      type: string
                      example: title
                    post_date:
                      type: string
                      example: "2019-04-20 12:30:00"
    post:
      tags:
        - Flex
      summary: 자랑하기 등록
      operationId: flex_post
      parameters:
        - name: Authorization
          in: header
          description: JWT 토큰
          required: True
          schema:
            type: string
            example: Bearer <access_token>
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                      example: image url
                  title:
                    type: string
                    example: title
                  content:
                    type: string
                    example: content
                  price:
                    type: string
                    example: "30,000,000"
                  histories:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2019-04-20 12:00:00"
                        content:
                          type: string
                          example: history content
      responses:
        '201':
          description: 성공

  /flex/<post_id>:
    get:
      tags:
        - Flex
      summary: 자랑하기 상세조회
      operationId: flex_retrieve
      parameters:
        - name: Authorization
          in: header
          description: JWT 토큰
          required: True
          schema:
            type: string
            example: Bearer <access_token>
        - name: post_id
          in: path
          description: 자랑하기 글 아이디
          required: True
          schema:
            type: string
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                  price:
                    type: string
                    example: 30,000,000
                  pawn_id:
                    type: string
                  photos:
                    type: array
                    items:
                      type: string
                      example: image url
                  author_name:
                    type: string
                    example: author name
                  author_id:
                    type: string
                    example: author id
                  title:
                    type: string
                    example: title
                  content:
                    type: string
                    example: content
                  like:
                    type: integer
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2019-04-20 12:00:00"
                        content:
                          type: string
                          example: comment content
                        author_name:
                          type: string
                          example: author name
                        author_id:
                          type: string
                          example: author id








#  /pet:
#    post:
#      tags:
#        - pet
#      summary: Add a new pet to the store
#      operationId: addPet
#      responses:
#        '405':
#          description: Invalid input
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#      requestBody:
#        $ref: '#/components/requestBodies/Pet'
#    put:
#      tags:
#        - pet
#      summary: Update an existing pet
#      operationId: updatePet
#      responses:
#        '400':
#          description: Invalid ID supplied
#        '404':
#          description: Pet not found
#        '405':
#          description: Validation exception
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#      requestBody:
#        $ref: '#/components/requestBodies/Pet'
#  /pet/findByStatus:
#    get:
#      tags:
#        - pet
#      summary: Finds Pets by status
#      description: Multiple status values can be provided with comma separated strings
#      operationId: findPetsByStatus
#      parameters:
#        - name: status
#          in: query
#          description: Status values that need to be considered for filter
#          required: true
#          explode: true
#          schema:
#            type: array
#            items:
#              type: string
#              enum:
#                - available
#                - pending
#                - sold
#              default: available
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
#            application/xml:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
#        '400':
#          description: Invalid status value
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#  /pet/findByTags:
#    get:
#      tags:
#        - pet
#      summary: Finds Pets by tags
#      description: >-
#        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
#        tag2, tag3 for testing.
#      operationId: findPetsByTags
#      parameters:
#        - name: tags
#          in: query
#          description: Tags to filter by
#          required: true
#          explode: true
#          schema:
#            type: array
#            items:
#              type: string
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
#            application/xml:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
#        '400':
#          description: Invalid tag value
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#      deprecated: true
#  '/pet/{petId}':
#    get:
#      tags:
#        - pet
#      summary: Find pet by ID
#      description: Returns a single pet
#      operationId: getPetById
#      parameters:
#        - name: petId
#          in: path
#          description: ID of pet to return
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Pet'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Pet'
#        '400':
#          description: Invalid ID supplied
#        '404':
#          description: Pet not found
#      security:
#        - api_key: []
#    post:
#      tags:
#        - pet
#      summary: Updates a pet in the store with form data
#      operationId: updatePetWithForm
#      parameters:
#        - name: petId
#          in: path
#          description: ID of pet that needs to be updated
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '405':
#          description: Invalid input
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#      requestBody:
#        content:
#          application/x-www-form-urlencoded:
#            schema:
#              type: object
#              properties:
#                name:
#                  description: Updated name of the pet
#                  type: string
#                status:
#                  description: Updated status of the pet
#                  type: string
#    delete:
#      tags:
#        - pet
#      summary: Deletes a pet
#      operationId: deletePet
#      parameters:
#        - name: api_key
#          in: header
#          required: false
#          schema:
#            type: string
#        - name: petId
#          in: path
#          description: Pet id to delete
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '400':
#          description: Invalid ID supplied
#        '404':
#          description: Pet not found
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#  '/pet/{petId}/uploadImage':
#    post:
#      tags:
#        - pet
#      summary: uploads an image
#      operationId: uploadFile
#      parameters:
#        - name: petId
#          in: path
#          description: ID of pet to update
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ApiResponse'
#      security:
#        - petstore_auth:
#            - 'write:pets'
#            - 'read:pets'
#      requestBody:
#        content:
#          application/octet-stream:
#            schema:
#              type: string
#              format: binary
#  /store/inventory:
#    get:
#      tags:
#        - store
#      summary: Returns pet inventories by status
#      description: Returns a map of status codes to quantities
#      operationId: getInventory
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: object
#                additionalProperties:
#                  type: integer
#                  format: int32
#      security:
#        - api_key: []
#  /store/order:
#    post:
#      tags:
#        - store
#      summary: Place an order for a pet
#      operationId: placeOrder
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Order'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Order'
#        '400':
#          description: Invalid Order
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Order'
#        description: order placed for purchasing the pet
#        required: true
#  '/store/order/{orderId}':
#    get:
#      tags:
#        - store
#      summary: Find purchase order by ID
#      description: >-
#        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
#        values will generated exceptions
#      operationId: getOrderById
#      parameters:
#        - name: orderId
#          in: path
#          description: ID of pet that needs to be fetched
#          required: true
#          schema:
#            type: integer
#            format: int64
#            minimum: 1
#            maximum: 10
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Order'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Order'
#        '400':
#          description: Invalid ID supplied
#        '404':
#          description: Order not found
#    delete:
#      tags:
#        - store
#      summary: Delete purchase order by ID
#      description: >-
#        For valid response try integer IDs with positive integer value.\ \
#        Negative or non-integer values will generate API errors
#      operationId: deleteOrder
#      parameters:
#        - name: orderId
#          in: path
#          description: ID of the order that needs to be deleted
#          required: true
#          schema:
#            type: integer
#            format: int64
#            minimum: 1
#      responses:
#        '400':
#          description: Invalid ID supplied
#        '404':
#          description: Order not found
#  /user:
#    post:
#      tags:
#        - user
#      summary: Create user
#      description: This can only be done by the logged in user.
#      operationId: createUser
#      responses:
#        default:
#          description: successful operation
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#        description: Created user object
#        required: true
#  /user/createWithArray:
#    post:
#      tags:
#        - user
#      summary: Creates list of users with given input array
#      operationId: createUsersWithArrayInput
#      responses:
#        default:
#          description: successful operation
#      requestBody:
#        $ref: '#/components/requestBodies/UserArray'
#  /user/createWithList:
#    post:
#      tags:
#        - user
#      summary: Creates list of users with given input array
#      operationId: createUsersWithListInput
#      responses:
#        default:
#          description: successful operation
#      requestBody:
#        $ref: '#/components/requestBodies/UserArray'
#  /user/login:
#    get:
#      tags:
#        - user
#      summary: Logs user into the system
#      operationId: loginUser
#      parameters:
#        - name: username
#          in: query
#          description: The user name for login
#          required: true
#          schema:
#            type: string
#        - name: password
#          in: query
#          description: The password for login in clear text
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: successful operation
#          headers:
#            X-Rate-Limit:
#              description: calls per hour allowed by the user
#              schema:
#                type: integer
#                format: int32
#            X-Expires-After:
#              description: date in UTC when token expires
#              schema:
#                type: string
#                format: date-time
#          content:
#            application/json:
#              schema:
#                type: string
#            application/xml:
#              schema:
#                type: string
#        '400':
#          description: Invalid username/password supplied
#  /user/logout:
#    get:
#      tags:
#        - user
#      summary: Logs out current logged in user session
#      operationId: logoutUser
#      responses:
#        default:
#          description: successful operation
#  '/user/{username}':
#    get:
#      tags:
#        - user
#      summary: Get user by user name
#      operationId: getUserByName
#      parameters:
#        - name: username
#          in: path
#          description: The name that needs to be fetched. Use user1 for testing.
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/User'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/User'
#        '400':
#          description: Invalid username supplied
#        '404':
#          description: User not found
#    put:
#      tags:
#        - user
#      summary: Updated user
#      description: This can only be done by the logged in user.
#      operationId: updateUser
#      parameters:
#        - name: username
#          in: path
#          description: name that need to be updated
#          required: true
#          schema:
#            type: string
#      responses:
#        '400':
#          description: Invalid user supplied
#        '404':
#          description: User not found
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#        description: Updated user object
#        required: true
#    delete:
#      tags:
#        - user
#      summary: Delete user
#      description: This can only be done by the logged in user.
#      operationId: deleteUser
#      parameters:
#        - name: username
#          in: path
#          description: The name that needs to be deleted
#          required: true
#          schema:
#            type: string
#      responses:
#        '400':
#          description: Invalid username supplied
#        '404':
#          description: User not found
#externalDocs:
#  description: Find out more about Swagger
#  url: 'http://swagger.io'
#
#components:
#  schemas:
#    Order:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        petId:
#          type: integer
#          format: int64
#        quantity:
#          type: integer
#          format: int32
#        shipDate:
#          type: string
#          format: date-time
#        status:
#          type: string
#          description: Order Status
#          enum:
#            - placed
#            - approved
#            - delivered
#        complete:
#          type: boolean
#          default: false
#      xml:
#        name: Order
#    Category:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
#      xml:
#        name: Category
#    User:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        username:
#          type: string
#        firstName:
#          type: string
#        lastName:
#          type: string
#        email:
#          type: string
#        password:
#          type: string
#        phone:
#          type: string
#        userStatus:
#          type: integer
#          format: int32
#          description: User Status
#      xml:
#        name: User
#    Tag:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
#      xml:
#        name: Tag
#    Pet:
#      type: object
#      required:
#        - name
#        - photoUrls
#      properties:
#        id:
#          type: integer
#          format: int64
#        category:
#          $ref: '#/components/schemas/Category'
#        name:
#          type: string
#          example: doggie
#        photoUrls:
#          type: array
#          xml:
#            name: photoUrl
#            wrapped: true
#          items:
#            type: string
#        tags:
#          type: array
#          xml:
#            name: tag
#            wrapped: true
#          items:
#            $ref: '#/components/schemas/Tag'
#        status:
#          type: string
#          description: pet status in the store
#          enum:
#            - available
#            - pending
#            - sold
#      xml:
#        name: Pet
#    ApiResponse:
#      type: object
#      properties:
#        code:
#          type: integer
#          format: int32
#        type:
#          type: string
#        message:
#          type: string
#  requestBodies:
#    Pet:
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/Pet'
#        application/xml:
#          schema:
#            $ref: '#/components/schemas/Pet'
#      description: Pet object that needs to be added to the store
#      required: true
#    UserArray:
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/User'
#      description: List of user object
#      required: true
#  securitySchemes:
#    petstore_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
#          scopes:
#            'write:pets': modify pets in your account
#            'read:pets': read your pets
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header